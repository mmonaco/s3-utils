#!/usr/bin/env python2

# This file is part of s3-utils.
#
# Copyright 2012 Matthew Monaco
#
# s3-utils is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# s3-utils is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ec2-utils.  If not, see <http://www.gnu.org/licenses/>.

import os, re, sys, subprocess
import argparse
import boto.s3.connection

S3_USAGE = """\
usage: s3 [-h|--help] [<options>] <command> [<args>]

  An OpenStack/Eucalyptus S3 storage tool

  s3 ls
     List all buckets.

  s3 ls <bucket>
     List all keys in the given bucket.

  s3 mk <bucket>
     Create a new bucket.

  s3 rm <bucket>
     Remove an existing bucket.

  s3 rm <bucket> <key>
     Remove a key from a bucket.

  s3 get <bucket> <key> [<file>]
     Retrieve the contents of bucket/key and place them in file, or stdout if
     not given

  s3 put <bucket> <key> [<file>]
     Populate bucket/key with the contents of file, or stdin if not given.

  options:
    -h, --help         print this message and exit
    -o, --openstack    source ~/.novarc
    -e, --eucalyptus   source ~/.eucarc

"""

def _source_env(filename=None):

	if filename is None:
		return

	cmd = ["sh", "-c", "source %s && env" % filename]
	prc = subprocess.Popen(cmd, stdout=subprocess.PIPE)

	for line in prc.stdout:

		if line[-1] == '\n':
			line = line[:-1]
		key, _, val = line.partition("=")
		os.environ[key] = val

	prc.communicate()


def _parse_url(url):

	m = re.match("http://(.+):(\d+)(/.+)?", url)

	if m and m.lastindex >= 2:
		host = m.group(1)
		port = int(m.group(2))
		path = m.group(3) if m.group(3) else "/"
	else:
		raise Exception("parse_url: bad input '%s'" % url)

	return host, port, path


def _cxn_from_env():

	ec2_access = os.getenv("EC2_ACCESS_KEY")
	ec2_secret = os.getenv("EC2_SECRET_KEY")
	s3_url     = os.getenv("S3_URL")

	s3_host, s3_port, s3_path = _parse_url(s3_url)

	cxn = boto.s3.connection.S3Connection(
		aws_access_key_id=ec2_access,
		aws_secret_access_key=ec2_secret,
		host=s3_host,
		port=s3_port,
		path=s3_path,
		is_secure=False,
		calling_format=boto.s3.connection.OrdinaryCallingFormat()
		)

	return cxn


def s3_ls_buckets(cxn):

	buckets = cxn.get_all_buckets()
	bnames = [b.name for b in buckets]
	bnames.sort()
	for bn in bnames:
		print(bn)


def s3_ls_bucket_keys(cxn, bucketname):

	bkt  = cxn.get_bucket(bucketname)
	keys = bkt.get_all_keys()
	knames = [k.name for k in keys]
	knames.sort()
	print(bkt.name)
	for kn in knames:
		print("\t%s" % kn)


def s3_mk(cxn, bucketname):

	cxn.create_bucket(bucketname)


def s3_rm_bucket(cxn, bucketname):

	cxn.delete_bucket(bucketname)


def s3_rm_key(cxn, bucketname, keyname):

	bkt = cxn.get_bucket(bucketname)
	bkt.delete_key(keyname)


def s3_set(cxn, bucketname, keyname, fd):

	bkt = cxn.get_bucket(bucketname)
	key = bkt.get_key(keyname)
	key.set_contents_from_file(fd)


def s3_get(cxn, bucketname, keyname, fd):

	bkt = cxn.get_bucket(bucketname)
	key = bkt.get_key(keyname)
	key.get_contents_to_file(fd)


def s3_argparse():

	parser = argparse.ArgumentParser()

	parser.print_help   = lambda fd=sys.stdout : fd.write(S3_USAGE)
	parser.print_usage  = lambda fd=sys.stdout : fd.write(S3_USAGE)
	parser.format_help  = lambda : S3_USAGE
	parser.format_usage = lambda : S3_USAGE

	parser.add_argument("-o", "--openstack",  dest="rc", action="store_const", const="~/.novarc", default=None)
	parser.add_argument("-e", "--eucalyptus", dest="rc", action="store_const", const="~/.eucarc")

	sparsers = parser.add_subparsers(dest="cmd")

	parser_ls = sparsers.add_parser("ls")
	parser_ls.add_argument("bucket", nargs="?", default=None)

	parser_get = sparsers.add_parser("get")
	parser_get.add_argument("bucket")
	parser_get.add_argument("key")
	parser_get.add_argument("file", nargs="?", default=sys.stdout, type=argparse.FileType("w"))

	parser_set = sparsers.add_parser("set")
	parser_set.add_argument("bucket")
	parser_set.add_argument("key")
	parser_set.add_argument("file", nargs="?", default=sys.stdin, type=argparse.FileType("r"))

	parser_mk = sparsers.add_parser("mk")
	parser_mk.add_argument("bucket")

	parser_rm = sparsers.add_parser("rm")
	parser_rm.add_argument("bucket")
	parser_rm.add_argument("key", nargs="?", default=None)

	args = parser.parse_args()

	return args


if __name__ == "__main__":

	args = s3_argparse()

	if args.rc:
		_source_env(args.rc)

	cxn = _cxn_from_env()

	if args.cmd == "ls":
		if args.bucket:
			s3_ls_bucket_keys(cxn, args.bucket)
		else:
			s3_ls_buckets(cxn)

	elif args.cmd == "mk":
		s3_mk(cxn, args.bucket)

	elif args.cmd == "rm":
		if args.key:
			s3_rm_key(cxn, args.bucket, args.key)
		else:
			s3_rm_bucket(cxn, args.bucket)

	elif args.cmd == "get":
		s3_get(cxn, args.bucket, args.key, args.file)

	elif args.cmd == "set":
		s3_set(cxn, args.bucket, args.key, args.file)


# vim :set noet
